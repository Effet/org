#+TITLE: Algorithm & Formulas For ACM/ICPC
#+DATE: <2013-08-06 Tue>
#+OPTIONS: num:t toc:t \n:nil LaTeX:t
#+MATHJAX: align:"left"

* [[file:divide_and_conquer.org][Divide & Conquer]]

* right-to-left binary method

** right-to-left binary exponentiation

http://primes.utm.edu/glossary/xpage/BinaryExponentiation.html

** Fast Fibonacci

#+begin_src cpp
#include <iostream>
#define mod 10000

int fibonacci(int n) {
   int ra,rb,a,b,x,y;
   if (n<2) return n;
   ra=rb=a=b=1;
   n-=2;
   while (n) {
      if (n&1) {
         x=ra*a+rb*b;
         y=ra*b+rb*(a-b+mod);
         ra=x%mod;rb=y%mod;
      }
      n>>=1;
      x=a*a+b*b;
      y=(2*a+mod)*b-b*b;
      a=x%mod;b=y%mod;
   }
   return ra;
}

int main() {
   for (int n;scanf("%d",&n),n!=-1;) {
      printf("%d\n",fibonacci(n));
   } return 0;
}
#+end_src

+ [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3914][UVA/12470 - Tribonacci]]
  - A: 矩阵连乘Fibonacci扩展。

* [[file:number_theory.org][Number Theory]]

* 组合数学

see ->  http://blog.himdd.com/?cat=69

** 错排问题的递推解决

see -> http://blog.pfan.cn/cruxd/17413.html
see -> http://blog.himdd.com/?p=1496
  
** 不相邻重排列

** 其他题目

+ [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3907][UVA/12464 - Professor Lazy, Ph.D.]]
  - A: 《具体数学》第一章课后习题，循环节为5。
+ [[http://acm.hdu.edu.cn/showproblem.php?pid=4359][HDU/4359 - Easy Tree DP?]]
  - Q: 构建二叉树，N个节点值分别为\(2^0,2^1,\cdots,2^{n-1}\)，求规定深度为D时，不同构建的种类数。
    （其中若某节点存在左右子树时，须满足左子树所有节点和小于右子树所有节点和）
  - A: 因为只需要保持相对关系即可，所有的状态可压缩到dp[N][D]（表示N个点D深度的二叉树的种类数）并乘以组合种类。
+ [[http://acm.hdu.edu.cn/showproblem.php?pid=3723][HDU/3723 - Delta Wave]]
  - Q: 从(0,0)点走到(N,0)点只能右上、右、右下走(不能走到x轴以下)，问有多少种不同走法？
  - A: 考虑到任意一个可行的路径中任意一个路径中的位置右上走的次数一定大于等于右下走的次数（不然会到x轴以下），
    则枚举N步中K对右上/右下，问题即转化为经典的Catalan数问题。
    
** 上下不着边问题

+ [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3795][UVA/12373 - Pair of Touching Circles]]
  - Q:
+ [[http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=3647][ZOJ/3647 - Gao the Grid]]
  - A: 即是上下左右不相接的问题，转化为上下左右固定的问题，两次求和即可
    
** 树

+ [[http://codeforces.com/problemset/problem/229/C][CF/229C - Triangles]]
  - Q: 一个完全图分成两个部分(A, B)，问两个部分一共有多少个三角环路
  - A: 容斥 C(n, 3) - C(m, 1)*C(n, 2) + sum(C(di, 2))  [m为B图边的个数，di为i点的度数B图中的度数]
    
* TODO Combination 组合数学2

#+begin_src latex
\subsection{Combination Identities 组合恒等式}
${n}\choose{r}$ is the number of r-element subsets of an n-element set\cite{comb1}, and
\begin{equation}
{{n}\choose{r}} = \frac{n!}{r!(n-r)!}
\end{equation}
Mirror Identity 对称性质
\begin{equation}
{{n}\choose{r}} = {{n}\choose{n-r}}
\end{equation}

\subsubsection{Pascal's Triangle}
Pascal's Triangle Identity\cite{comb1}.
\begin{equation}
{{n}\choose{r}} = {{n-1}\choose{r-1}} + {{n-1}\choose{r}}
\end{equation}
Extended Pascal's Triangle Identity\cite{comb1}.
\begin{equation}
{{n}\choose{r}} = \sum \limits_{i=0}^k{{{n-k}\choose{r-k-i}}{{k}\choose{i}}}
\end{equation}

\subsubsection{Row's sum}
Binomial theorem. 二项式定理
\begin{equation}
\sum \limits_{k=0}^n{{n}\choose{k}} = 2^n
\end{equation}
平方和：The sum of the squares of the elements of row n equals the middle element of row $(2n - 1)$ \cite{comb2}.
\begin{equation}
\sum \limits_{k=0}^n{{{n}\choose{k}}^2} = {{2n}\choose{n}}
\end{equation}

\subsubsection{Diagonal's sum}
Diagonal sum\cite{comb1}. 对角和
\begin{equation}
\sum \limits_{i=r}^n{{i}\choose{r}} = {{n+1}\choose{r+1}}
\end{equation}
Second order diagonal sum\cite{comb1}.
\begin{equation}
\sum \limits_{i=r}^n{(n-i+1){{i}\choose{r}}} = {{n+2}\choose{r+2}}
\end{equation}
K-th order diagonal sum\cite{comb1}.
\begin{equation}
\sum \limits_{i=r}^n{{{n-i+k-1}\choose{k-1}}{{i}\choose{r}}} = {{n+k}\choose{r+k}}
\end{equation}
The ``shallow diagonals'' of Pascal's triangle sum to Fibonacci numbers\cite{comb3},
\begin{equation}
\sum \limits_{k=0}^{\lfloor n/2 \rfloor}{{n-k}\choose{k}} = F_{n+1}
\end{equation}

\subsection{Figurate number 形数}
The simplicial polytopic numbers for r = 1, 2, 3, 4, ... are:\cite{comb4}

\begin{equation}
P_1(n) = \frac{n}{1} = {{n+0}\choose{1}}
\end{equation}
\begin{equation}
P_2(n) = \frac{n(n+1)}{2} = {{n+1}\choose{2}} \mbox{(triangular numbers)}
\end{equation}
\begin{equation}
P_3(n) = \frac{n(n+1)(n+2)}{6} = {{n+2}\choose{3}}
\end{equation}
\begin{equation}
P_4(n) = \frac{n(n+1)(n+2)(n+3)}{24} = {{n+3}\choose{4}}
\end{equation}
\ldots
\begin{equation}
P_r(n) = \frac{n(n+1)(n+2)\ldots(n+r-1)}{r!} = {{n+r-1}\choose{r}}
\end{equation}

\subsection{Catalan number}
#+end_src

* TODO 博弈

# - [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3913][UVA/12469 - Stones]]
#   - Q: 
#   - A:
http://www.chenyajun.com/2010/06/22/4360

** Sprague-Grundy theorem

** 博弈证明

- 必败态和胜态有着如下性质
  1) 若面临末状态者为获胜则末状态为胜态否则末状态为必败态。
  2) 一个局面是胜态的充要条件是该局面进行某种决策后会成为必败态。
  3) 一个局面是必败态的充要条件是该局面无论进行何种决策均会成为胜态

** 奇异局

#+BEGIN_EXAMPLE
ak =[k（1+√5）/2]，bk= ak + k （k=0，1，2，...,n 方括号表示取整函数)
#+END_EXAMPLE

* 概率

** 期望

期望可以分解成多个子期望的加权和，权为子期望发生的概率，
即 E(aA+bB+...) = aE(A) + bE(B) +... 

** 全概率

+ [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3904][UVA/12461 - Airplane]]
  - Q: N人 *依次入座* ，第一个人随机坐1~N号座位，
    其他人(i号人)若i号座位没有被占则坐i号座位，否则剩下空的位置随机坐，
    问N号人不坐自己位置的概率。
  - A: 《编程之美》 - 金刚坐飞机问题。其中第i个人坐自己位置的概率 \(\large P(i)=\frac{N-i+1}{N-i+2}\)

* [[file:computational_geometry.org][Computational Geometry]]
* [[file:string_algorithm.org][String Algorithm]]
* [[file:range_query_algorithm.org][Range Query Algorithm]]
* [[file:graph_theory.org][Graph Theory]]
* [[file:hashing.org][Hashing]]

* 优化

** 单调优化

*** stack 栈

+ [[http://www.spoj.pl/problems/CITY2/][SPOJ/CITY2 - A Famous City]]
+ [[http://acm.hdu.edu.cn/showproblem.php?pid=4328][HDU/4328 - Cut the cake]]
+ [[http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=3925][UVA/12481 - K-Neutral Rectangles]] ***TODO

** RMQ-ST 优化

* DLX 跳舞链

- [[http://poj.org/problem?id=3074][POJ/3074 - Sudoku]]，[[http://www.cnblogs.com/AndreMouche/archive/2011/02/24/1964136.html][学姐的博客]]
#+begin_src cpp
#include<stdio.h>
#include<string.h>


const int MAX_COLOUMN = 81+9*9+9*9+9*9+2;//最多出现列数
const int MAX_ROW = 81*9+2;//最多出现的列数


int cnt[MAX_COLOUMN];//cnt[i]统计第i列1的个数
int most,coloumn;
bool ans[MAX_ROW];//ans存放最终选中的行


//跳舞链中的节点
struct Point
{
    int up,down,left,right;//上，下，左，右
    int coloumn;//该点所在的列标
    int row;//行标
} node[MAX_ROW*MAX_COLOUMN+MAX_COLOUMN];


//初始化跳舞链信息为空
void init(int m)
{
    int i;
    for(i=0;i<=m;i++)
    {
        node[i].down=i;
        node[i].up = i;
        node[i].coloumn=i;
        node[i].left=i-1;
        node[i].right=i+1;
        cnt[i]=0;
    }
    node[0].left = m;
    node[m].right = 0;
}


void remove(int c)//删除c列上所有1元素所在的行
{
    node[node[c].right].left=node[c].left;
    node[node[c].left].right=node[c].right;
    int t,tt;
    for(t=node[c].down;t!=c;t=node[t].down)//从上到下从左到右删除该列上的每一非零元素所在行信息
    {
        for(tt = node[t].right;tt!=t;tt=node[tt].right)//删除非零元素所在行
        {
            cnt[node[tt].coloumn]--;
            node[node[tt].down].up = node[tt].up;
            node[node[tt].up].down = node[tt].down;
        }
    }
}


void resume(int c)//还原c列上所有1元素所在的行
{
    int t,tt;
    for(t=node[c].up;t!=c;t=node[t].up)//从下往上从左到右还原该c列中1所在的行信息
    {
        for(tt=node[t].left;tt!=t;tt=node[tt].left)
        {
            cnt[node[tt].coloumn]++;
            node[node[tt].up].down=tt;
            node[node[tt].down].up=tt;
        }
    }

    node[node[c].right].left=c;
    node[node[c].left].right=c;
}


bool dfs(int k)//k为已经选中的行的数目
{
    int i,j;
    if(k>=most)return false;
    if(node[coloumn].right == coloumn)//当前跳舞链已为空
    {
        if(k<most)
            most = k;
        return true;
    }
 
    int t = coloumn+1;
    int c;
    //选取当前矩阵中1最少的列
    for(i=node[coloumn].right;i!=coloumn;i=node[i].right)
    {
        if(cnt[i]<t)
        {
            c=i;t=cnt[i];
            if(t==1)break;
        }
    }

    remove(c);//删除列c中所有1所在的行

    //删除时从左到右从上到下，还原时从下到上，从右到左
    for(i = node[c].down;i!=c;i=node[i].down)
    {
        for(j=node[i].right;j!=i;j=node[j].right)
        {
            remove(node[j].coloumn);
        }
        ans[node[j].row]=true;
        if(dfs(k+1))
        {
            return true;
        }
        ans[node[j].row]=false;
        for(j=node[j].left;j!=i;j=node[j].left)
        {
            resume(node[j].coloumn);
        }

  
    }

    resume(c);
    return false;
}


bool graph[MAX_ROW][MAX_COLOUMN];
void addrow(int i,int j,int k)
{
    int curr = (i*9+j)*9+k;
    graph[curr][(i*9+j)]=true;
    graph[curr][81+i*9+k]=true;
    graph[curr][81+81+j*9+k]=true;
    int tr = i/3;
    int tc = j/3;
    graph[curr][81+81+81+(tr*3+tc)*9+k]=true;
}
 
char str[MAX_ROW];
int main()
{
    int N,M,i,j,k;
    while(scanf("%s",str)!=EOF)
    {
        if(strcmp(str,"end")==0)break;
        N=81*9;
        M = 9*9+9*9+9*9+9*9;
        coloumn = M;
        int cur=coloumn+1;//当前节点编号
        init(coloumn);
        memset(graph,0,sizeof(graph));
        for(i=0;i<9;i++)
            for(j=0;j<9;j++)
            {
                if(str[i*9+j]=='.')
                {
                    for(k=0;k<9;k++)//遍历每一种颜色
                    {
                        addrow(i,j,k);
                    }
                    continue;
                }
                k = str[i*9+j]-'1';
                addrow(i,j,k);
            }
        for(i=0;i<N;i++)
        {
            int start = cur;//记录第i列的开始点编号
            int pre = cur;//记录该列中当前1的左边第一个1编号
            for(j=0;j<M;j++)
            {
                // scanf("%d",&n);
                if(graph[i][j])//跳舞链中仅插入非0元素
                {
                    int pos = j;
                    node[cur].up = node[pos].up;
                    node[node[pos].up].down = cur;
                    node[cur].down = pos;
                    node[pos].up = cur;
                    cnt[pos]++;//该列1的个数+1
                    node[cur].coloumn = pos;
                    node[cur].left = pre;
                    node[pre].right = cur;
                    node[cur].right = start;
                    node[start].left=cur;
                    node[cur].row = i;
                    pre=cur++;
                }
            }
        }
 
  
        most = N+1;//记录最少需要选中的行数
        memset(ans,false,sizeof(ans));
        dfs(0);
        // printf("Yes, I found it\n");
        for(i=0;i<81;i++)
            for(j=0;j<9;j++)
                if(ans[i*9+j])
                {
                    printf("%d",j+1);
                    break;
                }
 
        printf("\n");
  
    }
    return 0;
}
#+end_src

* Unconcerned

** 并查集

*** Think

#+BEGIN_EXAMPLE
并查集的一般用途就是用来维护某种具有自反、对称、传递性质的关系的等价类。并查集一
般以树形结构存储，多棵树构成一个森林，每棵树构成一个集合，树中的每个节点就是该集
合的元素，找一个代表元素作为该树(集合)的祖先。
#+END_EXAMPLE

** STL

*** c++保留小数

#+BEGIN_SRC cpp
#include <iomanip>
#include <iostream>
using namespace std;

int main (){
   double n = 12.350922222222222222222;
   cout<<setiosflags(ios::fixed)<<setprecision(2)<<n<<endl;
   return 0;
}
#+END_SRC
