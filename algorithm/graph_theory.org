#+TITLE: Graph Theory
#+DATE: <2013-08-06 Tue>

* Knowledge

** tree

1. 在树中去掉一条边后所得的的图是不连通的
2. 在树中添加一条边后所得的图一定存在圈
3. 树的每一对定点u和v之间有且仅有一条路径
   
** 独立集，覆盖集，支配集，最大团，最大匹配

http://www.cppblog.com/RyanWang/archive/2009/05/01/81617.aspx

1. 独立集
   * 独立集是指图的顶点集的一个子集,该子集的导出子图不含边.如果一个独立集不是任何
     一个独立集的子集, 那么称这个独立集是一个极大独立集.一个图中包含顶点数目最多
     的独立集称为最大独立集。最大独立集 一定是极大独立集，但是极大独立集不一定是
     最大的独立集。
2. 支配集
   * 与独立集相对应的就是支配集，支配集也是图顶点集的一个子集，设S 是图G 的一个支
     配集，则对于图中的任意一个顶点u，要么属于集合s, 要么与s 中的顶点相邻。 在s中
     除去任何元素后s不再是支配集，则支配集s是极小支配集。称G的所有支配集中顶点个
     数最 少的支配集为最小支配集，最小支配集中的顶点个数成为支配数。
3. 最小点的覆盖
   * 最小点的覆盖也是图的顶点集的一个子集，如果我们选中一个点，则称这个点将以他为
     端点的所有边都覆盖了。将图中所有的边都覆盖所用顶点数最少，这个集合就是最小的
     点的覆盖。
4. 最大团
   * 图G的顶点的子集，设D是最大团，则D中任意两点相邻。若u，v是最大团，则u,v有边相
     连，其补图u,v没有边相连，所以图G的最大团=其补图的最大独立集。
5. 一些性质
   1) 最大独立集+最小覆盖集=V
   2) 最大团=补图的最大独立集
   3) 最小覆盖集=最大匹配
   4) 最小路径覆盖＝v-最大匹配数

* 强连通

** Kosaraju

#+BEGIN_SRC cpp
#include <stdio.h>
#include <string.h>
#include <vector>
#include <iostream>
using namespace std;
#define MAXN 110000
bool flag[MAXN];
int n, numb[MAXN], belg[MAXN];
vector<int> adj[MAXN], radj[MAXN];

void VisitOne(int cur, int &sig) {
    flag[cur] = true;
    for (int i=0; i<adj[cur].size(); ++i)
        if (flag[adj[cur][i]] == false)
            VisitOne(adj[cur][i],sig);
    numb[++sig] = cur;
}

void VisitTwo(int cur, int sig) {
    flag[cur] = true;
    belg[cur] = sig;
    for (int i=0; i<radj[cur].size(); ++i)
        if (flag[radj[cur][i]] == false)
            VisitTwo(radj[cur][i],sig);
}

int Kosaraju_StronglyConnectedComponent() {
    int i, sig;
    memset(flag+1,0,sizeof(bool)*n);
    for (sig=0,i=1; i<=n; ++i)
        if (flag[i] == false)
            VisitOne(i,sig);

    memset(flag+1,0,sizeof(bool)*n);
    for (sig=0,i=n; i>0; --i)
        if (flag[numb[i]] == false)
            VisitTwo(numb[i],++sig);
   
    return sig;
}
#+END_SRC

** Tarjan

#+BEGIN_SRC cpp
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <vector>
#include <set>
using namespace std;

#define MAXN 30001

enum {NOTVIS, VIS, OVER};
int flag[MAXN];

int indx[MAXN], mlik[MAXN];
int stck[MAXN];

int n, belg[MAXN];
vector<int> adj[MAXN];


void Visit(int x, int &sig, int &scc_num) {
    stck[++stck[0]] = x;
    flag[x] = VIS;
    mlik[x] = indx[x] = ++sig;
    for (int i=0; i<adj[x].size(); ++i) {
        int y = adj[x][i];
        if (NOTVIS == flag[y]) {
            Visit(y, sig, scc_num);
            mlik[x] = min(mlik[x], mlik[y]);
        }
        else if (VIS == flag[y])
            mlik[x] = min(mlik[x], indx[y]);
    }
    if (mlik[x] == indx[x]) {
        ++scc_num;
        do {
            belg[stck[stck[0]]] = scc_num;
            flag[stck[stck[0]]] = OVER;
        } while (stck[stck[0]--] != x);
    }
}

int Tarjan_StronglyConnectedComponent() {
    int i, sig, scc_num;
    memset(flag+1,NOTVIS,sizeof(int)*n);
    sig = 0; scc_num = 0; stck[0] = 0;
    for (i=1; i<=n; ++i)
        if (NOTVIS==flag[i])
            Visit(i,sig,scc_num);
    return scc_num;
}
#+END_SRC

** Gabow

* Flow

** Max Flow

*** dinic_阵

#+BEGIN_SRC cpp
#include <iostream>
#include <queue>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
using namespace std;

#define MAX 310

int cap[MAX][MAX];
int lev[MAX];
queue<int> q;
int BFS(int s,int t)
{
	int u,v;
	memset(lev,-1,sizeof(lev));
	q.push(s);
	lev[s] = 0;
	while( !q.empty() )
	{
		u = q.front();
		q.pop();
		for(v=0; v<=t; v++)
			if( cap[u][v] > 0 && lev[v] == -1 )
			{
				lev[v] = lev[u] + 1;
				q.push(v);
			}
	}
	return lev[t] != -1;
}
int Dinic(int s,int t)
{
	int a[MAX],cur[MAX];
	int pre[MAX];
	int flow = 0;
	int i,u,flag,v,ag,k;
	while( BFS(s,t) )
	{
		for(i=0; i<=t; i++)
		{					// cur里初始化是第一个节点哈 
			cur[i] = 0;		// DFS中，如果需要回溯，就回溯到cur中的节点。 
			a[i] = INT_MAX;  // a里面存的是剩余流量 
		}
		u = s;
		while(1)
		{
			flag = 0;
			for(v=cur[u]; v<=t; v++)
				if( cap[u][v] > 0 && lev[u] + 1 == lev[v] )
				{
					flag = 1;
					break;
				}
			if( flag )
			{
				cur[u] = v + 1;
				pre[v] = u;
				a[v] = cap[u][v];
				if( a[v] > a[u] )
					a[v] = a[u];
				u = v;			// 从找到的节点后开始在层次图里找路 
				if( u == t ) 	// 找到t后，增广 
				{
					ag = a[t];
					flow += ag;
					for(v=t; v!=s; v=pre[v])
					{
						cur[pre[v]] = v;	//	退回上一步。。 
						cap[pre[v]][v] -= ag;
						cap[v][pre[v]] += ag;
						a[v] -= ag;		
						if( cap[pre[v]][v] == 0 )
							u = pre[v];
					}
				}
			}
			else
				if( u != s )	// 如果u ！= s 那么这条路走不通的话，从u的上一个节点继续找。 
				{
					lev[u] = INT_MAX;  // 相当于从层次图里删除这个节点。 
					u = pre[u];
				}
				else  // 如果从源点找不到增广路，就结束咧。 
					break;
		}
	}
	return flow;
}
#+END_SRC

*** hdu 3084 最小割_Dinic+isap

#+BEGIN_SRC cpp
  //一堆房子，有的房子之间有门，有的房子有侵入者，有的房子没有侵入者，
	 // 有一个房间需要保护。I代表有侵入者，NI代表没有侵入者，
	 // 一开始的N,M代表的n个房间和m房间需要保护。NI或者I后边跟一个k，
	 // 然后后边k个数表示从第i个房间可以到达这些个房间不需要钥匙，
	 // 而这k个房间到达第i个房间只能到达一次或者从第i个房间过去再过来。。。

	 
	 
//  一头染色，一头不染色 为割边
#include <iostream>  
#include <vector>
#include<algorithm>
using namespace std;
#define inf 2000000000
#define N 210
#define M 20000
struct edge{
	int from,to,val,next;
}e[M];
int w[N],que[N],dis[N],edge,cur[N];
void add(int from,int to,int va){
    e[edge].from=from;
	e[edge].to=to;
	e[edge].val=va;
    e[edge].next=w[from];
	w[from]=edge++;

    e[edge].from=to;
	e[edge].to=from;
	e[edge].val=0;
    e[edge].next=w[to];
	w[to]=edge++;
}
int bfs(int n,int s,int t){
    int head,tail,id;
    head=tail=0;que[tail++]=s;
    memset(dis,-1,sizeof(int)*n);
	dis[s]=0;
	while(head<tail) // bfs,得到顶点i的距s的最短距离dis[i]
	{
		for(id=w[que[head++]];id!=-1;id=e[id].next)
			if(e[id].val>0&&dis[e[id].to]==-1)
            {
				dis[e[id].to]=dis[e[id].from]+1;
                que[tail++]=e[id].to;
                if(e[id].to==t) return 1;
            }
	}
    return 0;
}
int Dinic(int n,int s,int t){
    int Mflow=0,tmp,i;
    while(bfs(n,s,t)){
        int u=s,tail=0;
        for(i=0;i<n;i++) cur[i]=w[i];
        while(cur[s]!=-1){
			if(u!=t&&cur[u]!=-1&&e[cur[u]].val>0&&dis[u]!=-1&&dis[u]+1==dis[e[cur[u]].to]){
				que[tail++]=cur[u];
				u=e[cur[u]].to;
			}
            else if(u==t){
                for(tmp=inf,i=tail-1;i>=0;i--)
					tmp=min(tmp,e[que[i]].val);
                for(Mflow+=tmp,i=tail-1;i>=0;i--){
                    e[que[i]].val-=tmp;
                    e[que[i]^1].val+=tmp;
                    if(e[que[i]].val==0) tail=i;
                }
                u=e[que[tail]].from;
            }
            else{
                while(tail>0&&u!=s&&cur[u]==-1) u=e[que[--tail]].from;
                cur[u]=e[cur[u]].next;
            }
		}
    }
    return Mflow;
}
int main()
{
	char str[3];
	int c,k,i,j,m,T,num,t;
	int n,a,b;
	scanf("%d",&T);
	while(T--)
	{
		memset(w,-1,sizeof(w));
		edge=0;
		scanf("%d%d",&n,&t);
		for(i=0;i<n;i++)
		{
			scanf("%s%d",str,&num);
			if(str[0]=='I') add(n,i,10000);
			while(num--)
			{
				scanf("%d",&a);
				add(i,a,10000);
				add(a,i,1);
			}
		}
		t=Dinic(n+1,n,t);
		if(t>=10000) printf("PANIC ROOM BREACH\n");
		else printf("%d\n",t);
	}
	return 0;
}



Isap
#include <iostream>  
#include <vector>
#include<algorithm>
using namespace std;
#define inf 2000000000
#define M 100000
#define N 1010
struct data
{
    int u,v,cap,next;
}e[M];
int w[N],stack[N],dis[N];
int now[N],pre[N],cnt[N],cur[N],cut[N],top,edge;
void add(int u,int v,int cap)
{
    e[edge].u=u;
    e[edge].v=v;
    e[edge].cap=cap;
    e[edge].next=w[u];
    w[u]=edge++;

    e[edge].u=v;
    e[edge].v=u;
    e[edge].cap=0;
    e[edge].next=w[v];
    w[v]=edge++;
}
int Isap(int n,int st,int ed)
{
    int edge_flow;
    int now_flow,found,min;
    int i,j,t;
    memset(dis,0,sizeof(dis));
    memset(now,-1,sizeof(now));
    memset(cnt,0,sizeof(cnt));
    i=st;
    edge_flow=0;
    now_flow=inf;
    cnt[0]=n;
    while(dis[st]<n)
    {
        cur[i]=now_flow;
        found=0;
        if(now[i]==-1) t=w[i];
        else t=now[i];
        while(t!=-1)
        {
            j=e[t].v;
            if(e[t].cap>0&&dis[j]+1==dis[i])
            {
                found=1;
                now[i]=t;
                if(e[t].cap<now_flow) now_flow=e[t].cap;
                pre[j]=t;
                i=j;
                if(i==ed)
                {
                    edge_flow+=now_flow;
                    while(i!=st)
                    {
                        e[pre[i]].cap -= now_flow;
                        e[pre[i]^1].cap+=now_flow;
                        i=e[pre[i]].u;
                    }
                    now_flow=inf;
                }
                break;
            }
            t=e[t].next;
        }
        if(found) continue;
        if(--cnt[dis[i]]==0) break;
        min=n-1;
        t=w[i];
        while(t!=-1)
        {
            if(e[t].cap>0&&dis[e[t].v]<min)
            {
                min=dis[e[t].v];
                now[i]=t;
            }
            t=e[t].next;
        }
        dis[i]=min+1;
        cnt[dis[i]]++;
        if(i!=st)
        {
            i=e[pre[i]].u;
            now_flow=cur[i];
        }
    }
    return edge_flow;
}
int main()
{
	char str[3];
	int c,k,i,j,m,T,num,t,n,a;
	scanf("%d",&T);
	while(T--)
	{
		memset(w,-1,sizeof(w));
		edge=0;
		scanf("%d%d",&n,&t);
		for(i=0;i<n;i++)
		{
			scanf("%s%d",str,&num);
			if(str[0]=='I') add(n,i,10000);
			while(num--)
			{
				scanf("%d",&a);
				add(i,a,10000);
				add(a,i,1);
			}
		}
		t=Isap(n+1,n,t);
		if(t>=10000) printf("PANIC ROOM BREACH\n");
		else printf("%d\n",t);
	}
	return 0;
}
#+END_SRC
