#+TITLE: Divide & Conquer
#+DATE: <2013-08-02 Fri>

* Binary Search

#+begin_src cpp
const int MAXN = 1000;

/* 找寻最近的大于n的位置 */
LL q[MAXN+10];
LL bsearch( LL n )
{
   LL l = 1, r = MAXN, m;
   LL t;
   while ( l < r )
   {
      m = (l+r)/2;
      if ( q[m] >= n )
      {
         if ( q[m-1] < n )
            return m;
         else
            r = m - 1;
      }
      else
         l = m + 1;
   }
   return l;
}
#+end_src

** 二分离散

#+begin_src cpp
#include <iostream>
#include <algorithm>
using namespace std;

const int MAXN = 100 + 10;
int q[MAXN];
int top;
int bsearch( int x ){// 返回离散化后值 [0,n-1]
   int l = 0, r = top - 1, m;
   while( l <= r ){
      m = (l+r)>>1;
      if( q[m] == x )
         return m;
      else if( q[m] > x )
         r = m - 1;
      else
         l = m + 1;
   }
}

int main() {
   int n, x[MAXN];
   while ( cin >> n ) {
      for ( int i = 0; i < n; ++ i )
         cin >> x[i];

      // insert
      for ( int i = 0; i < n; ++ i )
         q[top++] = x[i];

      // 二分离散化
      sort( q, q+top );
      int j = 1;
      for ( int i = 1; i < top; ++ i )
         if ( q[i] != q[i-1] ) // 删除重复元素
            q[j++] = q[i];
      top = j;

      // 变更为离散化后的值
      for ( int i = 0; i < n; ++ i )
         x[i] = bsearch( x[i] );

      // 原来的值
      for ( int i = 0; i < n; ++ i )
         cout << q[x[i]] << ' ';
      cout << endl;

   }
   return 0;
}
#+end_src

* Divide Tree

Refers to:
http://www.notonlysuccess.com/index.php/divide-tree/
http://acm.bjtu.edu.cn:8080/wiki/?tag=%E5%88%92%E5%88%86%E6%A0%91

#+begin_src cpp
// Refers to:
//   http://www.notonlysuccess.com/index.php/divide-tree/
//   http://acm.bjtu.edu.cn:8080/wiki/?tag=%E5%88%92%E5%88%86%E6%A0%91

#include <cstdio>
#include <algorithm>
using namespace std;


const int MAX_LEN  = 100000 + 5; // 10^5
const int MAX_DEEP = 20;         // The deep of segment tree.


int sorted           [MAX_LEN]; // The sorted array.
int toLeft [MAX_DEEP][MAX_LEN]; // Counts to the left in [l, i]. (i determine l)
int values [MAX_DEEP][MAX_LEN]; // Values stored in each segment tree's node.


// Building segment tree T(l, r).
void build(int l, int r, int d = 0)
{
    if(l == r) return ;
    int mid = (l + r) >> 1;

    int lsame = mid - l + 1;    // Count of numbers equal to sorted[mid].
    for(int i = l; i <= r; ++ i)
        if(values[d][i] < sorted[mid])
            -- lsame;

    int lpos = l;
    int rpos = mid + 1;
    int cnt  = 0;
    for(int i = l; i <= r; ++ i)
    {
        if(values[d][i] < sorted[mid])
        {
            values[d+1][lpos++] = values[d][i];
            ++ cnt;
        }
        else if (values[d][i] == sorted[mid] && lsame)
        {
            values[d+1][lpos++] = values[d][i];
            ++ cnt;
            -- lsame;
        }
        else
            values[d+1][rpos++] = values[d][i];

        toLeft[d][i] = cnt;
    }

    build(l,     mid, d+1);
    build(mid+1, r,   d+1);
}


// Query for Kth-number in [L,R] on the segment tree T(l, r).
int query(int L, int R, int k, int l, int r, int d = 0)
{
    if(L == R)
        return values[d][L];

    int mid = (l + r) >> 1;

    int left1 = (L > l ? toLeft[d][L-1] : 0); // Count to the left in [l, L-1].
    int left2 = toLeft[d][R] - left1;         // Count to the left in [L, R].

    if(left2 >= k)              // K-th number in left-son of [L, R].
    {
        int newl = l + left1;
        int newr = l + left1 + left2 - 1;
        return query(newl, newr, k, l, mid, d+1);
    }
    else
    {
        int right1 = L - l - left1;     // Count to the right in [l, L-1].
        int right2 = R - L + 1 - left2; // Count to the right in [L, R].
        int newl = mid + right1 + 1;
        int newr = mid + right1 + right2;
        return query(newl, newr, k-left2, mid+1, r, d+1);
    }
}


int main()
{
    int n, m;
    // `n' is length of sequence, `m' is count of querys.
    scanf("%d%d", &n, &m);
    for (int i = 1; i <= n; ++i)
    {
        scanf("%d", &values[0][i]);
        sorted[i] = values[0][i];
    }
    sort(sorted + 1, sorted + n + 1);
    build(1, n);
    while (m--)
    {
        int l, r, k;
        // Query the K-th number of [l, r].
        scanf("%d%d%d", &l, &r, &k);
        printf("%d\n", query(l, r, k, 1, n));
    }
    return 0;
}
#+end_src

* Tree Reconstruction

- 已知先序序列 & 中序序列， 求后序序列：
#+begin_src cpp
#include<iostream>
#include<cstdio>
#include<string>
using namespace std;

struct Node
{
   char data;
   Node * lchild;
   Node * rchild;
};

Node* CreatTree(string pre, string in)
{
   Node * root = NULL;  //树的初始化
   if(pre.length() > 0)
   {
      root = new Node;  //为根结点申请结构体所需要的内存
      root->data = pre[0]; //先序序列的第一个元素为根结点
      int index = in.find(root->data);  //查找中序序列中的根结点位置
      root->lchild = CreatTree(pre.substr(1, index), in.substr(0, index));  //递归创建左子树
      root->rchild = CreatTree(pre.substr(index + 1), in.substr(index + 1)); //递归创建右子树
   }
   return root;
}

void PostOrder(Node * root)  //递归后序遍历
{
   if(root != NULL)
   {
      PostOrder(root->lchild);
      PostOrder(root->rchild);
      cout<<root->data;
   }
}

int main()
{
   string pre_str, in_str;
   Node *root;
   while(cin>>pre_str>>in_str)
   {
      root = CreatTree(pre_str, in_str);
      PostOrder(root);
      cout<<endl;
   }
   return 0;
}
#+end_src
